R.version()
R.Version()
R.version
unstall.packages("swirl")
install.packages("swirl")
q()
x <- 1:4
y <- 2:3
x+y
x
x<- 5
x
x <- 1:4
x
x[x>1]<-7
x
tab <- read.csv(file="/home/atin/R/hw1_data.csv")
tab
readLines(tab,nrows=2)
readLines(tab,nrows=2)
con <- file("/home/atin/R/hw1_data.txt")
x <- readLines(con,nrows=2)
x <- readLines(con,nrow=2)
x <- readLines(con,2)
readLines(tab,2)
read.csv(tab,2)
str(file)
str(readLines)
con <- read.csv("/home/atin/R/hw1_data.csv")
class(con)
attributes(data.frame)
attributes("data.frame")
con <- file("/home/atin/R/hw1_data.csv")
class(con)
class(con)
readLines(con,n=2)
con <- read.csv("/home/atin/R/hw1_data.csv")
class(con)
con[1:3,]
con[1:2,]
attributes(con)
con
con[-1:2,]
con[152:153,]
con.length
length(con)
nrows(con)
nrow(con)
con[nrow(con)-1:nrow(con),]
con[nrow(con):nrow(con),]
con[nrow(con)-1:nrow(con),]
nrow(con)-1
con[nrow(con)-1:nrow(con),]
con[152:153,]
con[-152:153,]
con[152-1:153,]
con[152:nrow(con),]
con[47,]["Ozone"]
con[47,][,"Ozone"]
con[,"Ozone"]
con[,"Ozone"][con==NA]
con[,"Ozone"][is.na(con)]
length(con[,"Ozone"][is.na(con)])
length(con[,"Ozone"][is.nan(con)])
length(con[,"Ozone"][is.NaN(con)])
length(con[,"Ozone"][is.na(con)])
con[,"Ozone"][is.na(con)]
con[,"Ozone"]
mean(con[,"Ozone"])
con[,"Ozone"][!is.na(con)]
con[,"Ozone"][is.na(con)]
con[,"Ozone"][!is.na(con)]
con[,"Ozone"][is.na(con)]
str(mean)
con[,"Ozone"][is.na(con)]
con[,"Ozone"][!is.na(con)]
x <- c(3,4,5)
mean(x)
con[,"Ozone"]
mean(con[,"Ozone"])
con[,"Ozone"]
y<- !is.na(con[,"Ozone"])
y
con[,"Ozone"][y]
mean(con[,"Ozone"][y])
con[,"Ozone"]
x1 <- con[,"Ozone"]>31
x1
x2 <- con[,"Temp"]>90
x2
con[con[,"Ozone"]>31]
con[con[,"Ozone"]>31]
con[,con[,"Ozone"]>31]
con[con[,"Ozone"]>31,]
con[,"Ozone"]>31
con[con[,"Ozone"]>31,]
c1 <- con[,"Ozone"]>31
con[c1]
con[c1,]
con[,]
con[,c(T,F,F,F,F,F)]
con[T,]
con[c1,]
y <- !is.na(con)
y
y <- !is.na(con[,"Ozone"])
y
c1
con[y,]
con[y,"Ozone"]
c1<-con[y,"Ozone"]>31
c1
con[y,"Ozone"][c1,]
con[y,"Ozone"][c1]
con[y,c("Ozone","Temp")][c1]
con[y,c("Ozone")][c1]
con[y,c("Ozone","Temp")][c1,]
con[y,c("Ozone","Temp")][c1,"Temp"]
str(complete)
str(cases)
x1 <- c(T,F)
x2 <- c(T,T)
x1*x2
x1
x1&x2
T & T
T & F
F & F
F & T
c2<-con[y,"Temp"]>90
c2
c1
c3 <- c1 & c2
c3
con[c3,]
con[c3,"Solar.R"]
mean(con[c3,"Solar.R"])
con[,"Month"]
c3 <- con[,"Month"]==6
c3
con[c3,"Temp"]
mean(con[c3,"Temp"])
c4 <- con[,"Month"]==5
con[c4,"Ozone"]
max(con[c4,"Ozone"])
y<-is.na(con[,"Ozone"])
c4-y
y
c5 <- c4*y
c5
as.logical(c5)
c6<-as.logical(c5)
max(con[c6,"Ozone"])
getwd()
getwd()
df <- read.csv("/home/atin/R/hw1_data.csv")
df
df[[1]]
df[df[[1]]>31]
df[df[[1]]>31,]
df[df[[1]]>31,1]
df[df[[1]]>31 & !is.na(df[[1]]),1]
df[df[[1]]>31 & !is.na(df[[1]]),]
df[df[[1]]>31 & !is.na(df[[1]]) & df[[4]]>90 & !is.na(df[[4]]),]
df[df[[1]]>31 & !is.na(df[[1]]) & df[[4]]>90 & !is.na(df[[4]]),"Solar.R"]
mean(df[df[[1]]>31 & !is.na(df[[1]]) & df[[4]]>90 & !is.na(df[[4]]),"Solar.R"])
mean(df[df[[5]]==6,"Temp"])
max(df[df[[5]]==5,"Ozone"])
max(df[df[[5]]==5 & !is.na(df[[5]]),"Ozone"])
df[df[[5]]==5 & !is.na(df[[5]]),"Ozone"]
df[df[[5]]==5 & !is.na(df[[1]]),"Ozone"]
max(df[df[[5]]==5 & !is.na(df[[1]]),"Ozone"])
x <- c(4,T)
x
class(x)
head(df)
head(df,2)
nrows(df)
nrow(df)
tail(df,2)
df[47,"Ozone"]
is.na(df[[1]])
length(is.na(df[[1]]))
df[is.na(df[[1]]),"Ozone"]
nrow(df[is.na(df[[1]]),"Ozone"])
df[is.na(df[[1]]),"Ozone"]
length(df[is.na(df[[1]]),"Ozone"])
df[!is.na(df[[1]]),"Ozone"]
df[!is.na(df[[1]]),1]
mean(df[!is.na(df[[1]]),1])
mean(df[df[[1]]>31 & !is.na(df[[1]]) & df[[4]]>90 & !is.na(df[[4]]),"Solar.R"])
mean(df[df[[5]]==6,"Temp"])
max(df[df[[5]]==5 & !is.na(df[[1]]),"Ozone"])
q()
install.packages("KernSmooth")
g()
q()
install.packages("KernSmooth")
library(KernSmooth)
q()
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3,14)
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
mysqrt<-sqrt(z-1)
info()
?sqrt
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
c(1,2,3,4)+c(0,10,100)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
q)
q()
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
?rep
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- c(0.5,55,-10,6)
tf < num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char,"atin")
my_name
paste(my_name,collapse=" ")
paste("Hello","World",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
sum(c(3,6))
my_data
0/0
Inf-Inf
q()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
q()
getwd()
setwd("~/coursera/rprogprogrammingassignment2/ProgrammingAssignment2")
v <- c(1,2)
c(v,3)
c(v,3)
c(v,3)
v<-c(v,3)
v
v
v<-c(v,3)
v
v<-c(1,2)
v
v[v==2]
v[v==3]
length(v[v==3])
length(v[v==2])
m1<-matrix(1:4,2,2)
m2<-matrix(5:8,2,2)
v<-c(m1,m2)
v
v[v==m1]
m1
v
class(v)
m1
m2
l<-list(m1,m2)
class(l)
l[1]
l[[1]]
l[[2]]
l[2]
l[1]
l
m3<-matrix(9:12,2,2)
?append
append(m3,l)
l
l
append(m3,l)
append(list(m3),l)
l
l<-append(list(m3),l)
l
l<-append(list(m3),l)
l
l
l[l==m1]
l[[l==m1]]
exists(l$m3)
?exists
exists("l",2)
exists("l",1)
l
exists("l",3)
exists("l",2)
exists("l",4)
exists("l",1)
m3<-m1
identical(m1,m3)
identical(m1,m2)
m1
m2
m3
m3<-matrix(1:4,2,2)
m3
m1
identical(m1,m3)
l<-list(m1,m2)
l
m3<-matrix(9:12,2,2)
l<-append(list(m3),l)
l
l
m1
l
?apply
?lapply
lapply(l,function(x){print(x)})
lapply(l,function(x){print(class(x))})
lapply(l,function(x){identical(m1,x)})
lapply(l,function(x){identical(m2,x)})
lapply(l,function(x){identical(m3,x)})
m4<-matrix(1:4,2,2)
lapply(l,function(x){identical(m4,x)})
m5<-matrix(99:103,2,2)
m5<-matrix(99:102,2,2)
lapply(l,function(x){identical(m5,x)})
class(lapply(l,function(x){identical(m5,x)}))
length(lapply(l,function(x){identical(m5,x)}))
class(lapply(l,function(x){identical(m5,x)}))
l2<-lapply(l,function(x){identical(m5,x)})
l2
l2[T]
l[l2]
l[l2==T]
l[l2==F]
length(l[l2==T])
length(l[l2==F])
?apply
source('~/coursera/rprogprogrammingassignment2/ProgrammingAssignment2/cachematrix.R')
source('~/coursera/rprogprogrammingassignment2/ProgrammingAssignment2/cachematrix.R')
source('~/coursera/rprogprogrammingassignment2/ProgrammingAssignment2/cachematrix.R')
source('~/coursera/rprogprogrammingassignment2/ProgrammingAssignment2/cachematrix.R')
l<-list(1)
l
l
?install.packages
?install.packages("hash")
install.packages("hash")
library(hash)
h<-hash(m1<-2.44)
h<-hash()
?hash
h
m1
m1<-matrix(1:4,2,2)
m1
h<-hash(key=m1,value=NULL)
h$m1
h<-hash(key=m1,value=2.43)
h
h$m1
h
m2<-matrix(1:4,2,2)
h$m2
h[m1]
h[[m1]]
h["m1"]
h[["m1"]]
h["m1"]
h["m2"]
h["m2"]
h["m1"]
h[c(m1)]
h<-hash()
m1
h.set(h,keys=m1,values=2.43)
.set(h,keys=m1,values=2.43)
h
clear(h)
?list
h
toString(h)
toString(m1)
m2
m3
map<-new.env(hash=T,parent=emptyenv())
m1
map$m1<-2.43
map$m1
m1
m2<-matrix(1:4,2,2)
m2
map$m2
toString(m1)
m11<-toString(m1)
map$m11<-2.43
map
map$m11
m12<-toString(matrix(1:4,2,2))
map$m12
map[["m11"]]
map[["m12"]]
map[["m11"]]
map[["m12"]]
map
map[[toString(m11)]]
map[[toString(m11)]]<-2.43
map[[toString(m11)]]
map[[toString(m12)]]
map[[toString(m11)]]<-2.44
map[[toString(m12)]]
map[[toString(m11)]]<-NULL
map[[toString(m12)]]
source('~/coursera/rprogprogrammingassignment2/ProgrammingAssignment2/cachematrix.R')
source('~/coursera/rprogprogrammingassignment2/ProgrammingAssignment2/cachematrix.R')
source('~/coursera/rprogprogrammingassignment2/ProgrammingAssignment2/cachematrix.R')
map[[toString(m12)]]
is.null(map[[toString(m12)]])
?is
m2
map[[toString(m12)]]<-m2
map[[toString(m12)]]
source('~/coursera/rprogprogrammingassignment2/ProgrammingAssignment2/cachematrix.R')
